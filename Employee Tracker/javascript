const inquirer = require('inquirer');
const mysql = require('mysql2');
const cTable = require('console.table');

// Create a connection to the database
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'your_password',
  database: 'employee_db'
});

db.connect(err => {
  if (err) throw err;
  console.log('Connected to the employee_db database.');
  startApp();
});

const startApp = () => {
  inquirer.prompt({
    type: 'list',
    name: 'action',
    message: 'What would you like to do?',
    choices: [
      'View All Departments',
      'View All Roles',
      'View All Employees',
      'Add Department',
      'Add Role',
      'Add Employee',
      'Update Employee Role',
      'Exit'
    ]
  })
  .then(answer => {
    switch (answer.action) {
      case 'View All Departments':
        viewAllDepartments();
        break;
      case 'View All Roles':
        viewAllRoles();
        break;
      case 'View All Employees':
        viewAllEmployees();
        break;
      case 'Add Department':
        addDepartment();
        break;
      case 'Add Role':
        addRole();
        break;
      case 'Add Employee':
        addEmployee();
        break;
      case 'Update Employee Role':
        updateEmployeeRole();
        break;
      case 'Exit':
        db.end();
        break;
    }
  });
};

const viewAllDepartments = () => {
  db.query('SELECT * FROM department', (err, results) => {
    if (err) throw err;
    console.table(results);
    startApp();
  });
};

const viewAllRoles = () => {
  db.query('SELECT role.id, role.title, department.name AS department, role.salary FROM role LEFT JOIN department ON role.department_id = department.id', (err, results) => {
    if (err) throw err;
    console.table(results);
    startApp();
  });
};

const viewAllEmployees = () => {
  db.query(`SELECT employee.id, employee.first_name, employee.last_name, role.title, department.name AS department, role.salary, 
    CONCAT(manager.first_name, ' ', manager.last_name) AS manager 
    FROM employee 
    LEFT JOIN role ON employee.role_id = role.id 
    LEFT JOIN department ON role.department_id = department.id 
    LEFT JOIN employee manager ON manager.id = employee.manager_id`, (err, results) => {
    if (err) throw err;
    console.table(results);
    startApp();
  });
};

const addDepartment = () => {
  inquirer.prompt({
    type: 'input',
    name: 'name',
    message: 'Enter the name of the department:'
  })
  .then(answer => {
    db.query('INSERT INTO department (name) VALUES (?)', answer.name, (err, result) => {
      if (err) throw err;
      console.log('Department added successfully!');
      startApp();
    });
  });
};

const addRole = () => {
  db.query('SELECT * FROM department', (err, results) => {
    if (err) throw err;
    const departments = results.map(({ id, name }) => ({
      name: name,
      value: id
    }));

    inquirer.prompt([
      {
        type: 'input',
        name: 'title',
        message: 'Enter the title of the role:'
      },
      {
        type: 'input',
        name: 'salary',
        message: 'Enter the salary of the role:'
      },
      {
        type: 'list',
        name: 'department_id',
        message: 'Select the department for the role:',
        choices: departments
      }
    ])
    .then(answer => {
      db.query('INSERT INTO role (title, salary, department_id) VALUES (?, ?, ?)', [answer.title, answer.salary, answer.department_id], (err, result) => {
        if (err) throw err;
        console.log('Role added successfully!');
        startApp();
      });
    });
  });
};

const addEmployee = () => {
  db.query('SELECT * FROM role', (err, roles) => {
    if (err) throw err;
    db.query('SELECT * FROM employee', (err, employees) => {
      if (err) throw err;

      const roleChoices = roles.map(({ id, title }) => ({
        name: title,
        value: id
      }));

      const managerChoices = employees.map(({ id, first_name, last_name }) => ({
        name: `${first_name} ${last_name}`,
        value: id
      }));
      managerChoices.unshift({ name: 'None', value: null });

      inquirer.prompt([
        {
          type: 'input',
          name: 'first_name',
          message: 'Enter the first name of the employee:'
        },
        {
          type: 'input',
          name: 'last_name',
          message: 'Enter the last name of the employee:'
        },
        {
          type: 'list',
          name: 'role_id',
          message: 'Select the role of the employee:',
          choices: roleChoices
        },
        {
          type: 'list',
          name: 'manager_id',
          message: 'Select the manager of the employee:',
          choices: managerChoices
        }
      ])
      .then(answer => {
        db.query('INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES (?, ?, ?, ?)', [answer.first_name, answer.last_name, answer.role_id, answer.manager_id], (err, result) => {
          if (err) throw err;
          console.log('Employee added successfully!');
          startApp();
        });
      });
    });
  });
};

const updateEmployeeRole = () => {
  db.query('SELECT * FROM employee', (err, employees) => {
    if (err) throw err;
    db.query('SELECT * FROM role', (err, roles) => {
      if (err) throw err;

      const employeeChoices = employees.map(({ id, first_name, last_name }) => ({
        name: `${first_name} ${last_name}`,
        value: id
      }));

      const roleChoices = roles.map(({ id, title }) => ({
        name: title,
        value: id
      }));

      inquirer.prompt([
        {
          type: 'list',
          name: 'employee_id',
          message: 'Select the employee to update:',
          choices: employeeChoices
        },
        {
          type: 'list',
          name: 'role_id',
          message: 'Select the new role for the employee:',
          choices: roleChoices
        }
      ])
      .then(answer => {
        db.query('UPDATE employee SET role_id = ? WHERE id = ?', [answer.role_id, answer.employee_id], (err, result) => {
          if (err) throw err;
          console.log('Employee role updated successfully!');
          startApp();
        });
      });
    });
  });
};
